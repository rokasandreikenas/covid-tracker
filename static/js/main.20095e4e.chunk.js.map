{"version":3,"sources":["components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","index.js","assets/covid.png"],"names":["Cards","data","confirmed","deaths","recovered","lastUpdate","renderCards","name","style","value","description","map","card","index","Grid","item","component","Card","xs","md","className","classNames","key","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","container","spacing","justify","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","dailyData","total","date","reportDate","fetchCountries","countries","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","NativeSelect","defaultValue","onChange","e","target","App","state","fetchedData","setState","this","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"oVAkEeA,G,MA3DD,SAAC,GAA4D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,WACrD,IAAKH,EACH,OAAO,2CAET,IAqBMI,EArBY,CAChB,CACEC,KAAM,WACNC,MAAO,WACPC,MAAOP,EAAUO,MACjBC,YAAa,uCAEf,CACEH,KAAM,YACNC,MAAO,YACPC,MAAOL,EAAUK,MACjBC,YAAa,sCAEf,CACEH,KAAM,SACNC,MAAO,SACPC,MAAON,EAAOM,MACdC,YAAa,wCAIaC,KAAI,SAACC,EAAMC,GACvC,OACE,kBAACC,EAAA,EAAD,CACEC,MAAI,EACJC,UAAWC,IACXC,GAAI,GACJC,GAAI,EACJC,UAAWC,IAAW,OAAQT,EAAKJ,OACnCc,IAAKT,GAEL,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAC3Cd,EAAKL,MAER,kBAACiB,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKjB,EAAKH,MAAOqB,SAAU,IAAKC,UAAU,OAE/D,kBAACP,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIO,KAAK3B,GAAY4B,gBAExB,kBAACT,EAAA,EAAD,CAAYG,QAAQ,SAASf,EAAKF,kBAK1C,OACE,yBAAKU,UAAU,mBACb,kBAACN,EAAA,EAAD,CAAMoB,WAAS,EAACC,QAAS,EAAGC,QAAQ,UACjC9B,M,yBC1DH+B,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACnBC,EAAgBJ,EAEhBE,IACFE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJf,kBAUXG,IAAMC,IAAIF,GAVC,2BASnBxC,KAAQC,EATW,EASXA,UAAWE,EATA,EASAA,UAAWD,EATX,EASWA,OAAQE,EATnB,EASmBA,WATnB,kBAYd,CACLH,YACAE,YACAD,SACAE,eAhBmB,kCAmBrBuC,QAAQC,IAAR,MAnBqB,0DAAH,sDAuBTC,EAAc,uCAAG,gCAAAN,EAAA,+EAEHE,IAAMC,IAAN,UAAaN,EAAb,WAFG,uBAElBpC,EAFkB,EAElBA,KACF8C,EAAe9C,EAAKU,KAAI,SAACqC,GAAD,MAAgB,CAC5C9C,UAAW8C,EAAU9C,UAAU+C,MAC/B9C,OAAQ6C,EAAU7C,OAAO8C,MACzBC,KAAMF,EAAUG,eANQ,kBAQnBJ,GARmB,gCAU1BH,QAAQC,IAAR,MAV0B,yDAAH,qDAcdO,EAAc,uCAAG,8BAAAZ,EAAA,+EAIhBE,IAAMC,IAAN,UAAaN,EAAb,eAJgB,uBAGhBgB,EAHgB,EAGxBpD,KAAQoD,UAHgB,kBAKnBA,EAAU1C,KAAI,SAAC4B,GAAD,OAAaA,EAAQhC,SALhB,gCAO1BqC,QAAQC,IAAR,MAP0B,yDAAH,qD,QC6BZS,G,OAhED,SAAC,GAAyD,IAAD,IAAtDrD,KAAQC,EAA8C,EAA9CA,UAAWC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,UAAamC,EAAc,EAAdA,QAAc,EACnCgB,mBAAS,IAD0B,mBAC9DP,EAD8D,KACnDQ,EADmD,KAGrEC,qBAAU,YACM,uCAAG,sBAAAjB,EAAA,kEACfgB,EADe,SACIV,IADJ,6EAAH,qDAIdY,KACC,IAEH,IAAMC,EAAYX,EAAUY,OAC1B,kBAAC,IAAD,CACE3D,KAAM,CACJ4D,OAAQb,EAAUrC,KAAI,qBAAGuC,QACzBY,SAAU,CACR,CACE7D,KAAM+C,EAAUrC,KAAI,qBAAGT,aACvB6D,MAAO,WACPC,YAAa,UACbC,MAAM,GAER,CACEhE,KAAM+C,EAAUrC,KAAI,qBAAGR,UACvB4D,MAAO,SACPC,YAAa,MACbE,gBAAiB,oBACjBD,MAAM,OAKZ,KAEEE,EAAWjE,EACf,kBAAC,IAAD,CACED,KAAM,CACJ4D,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,MAAO,SACPG,gBAAiB,CACf,uBACA,uBACA,wBAEFjE,KAAM,CAACC,EAAUO,MAAOL,EAAUK,MAAON,EAAOM,UAItD2D,QAAS,CACPC,OAAQ,CACNC,SAAS,EACTC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAsBjC,QAItD,KAEJ,OACE,yBAAKnB,UAAU,mBAAmBmB,EAAU4B,EAAWR,K,kBC5B5Cc,G,OAhCO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACDnB,mBAAS,IADR,mBAC1CoB,EAD0C,KACxBC,EADwB,KAWjD,OARAnB,qBAAU,YACM,uCAAG,sBAAAjB,EAAA,kEACfoC,EADe,SACWxB,IADX,6EAAH,qDAIdM,KACC,CAACkB,IAGF,kBAACC,EAAA,EAAD,CAAazD,UAAU,gBACrB,kBAAC0D,EAAA,EAAD,CACEC,aAAa,GACbC,SAAU,SAACC,GACTP,EAAoBO,EAAEC,OAAOzE,SAG/B,4BAAQA,MAAM,IAAd,UACCkE,EAAiBhE,KAAI,SAAC4B,EAAS1B,GAC9B,OACE,4BAAQJ,MAAO8B,EAASjB,IAAKT,GAC1B0B,U,iBCQA4C,E,4MA9BbC,MAAQ,CACNnF,KAAM,GACNsC,QAAS,I,EASXmC,oB,uCAAsB,WAAOnC,GAAP,eAAAC,EAAA,sEACMF,EAAUC,GADhB,OACd8C,EADc,OAGpB,EAAKC,SAAS,CAAErF,KAAMoF,EAAa9C,QAASA,IAHxB,2C,wPALMD,I,OAApB+C,E,OAENE,KAAKD,SAAS,CAAErF,KAAMoF,I,qIASd,IAAD,EACmBE,KAAKH,MAAvBnF,EADD,EACCA,KAAMsC,EADP,EACOA,QACd,OACE,yBAAKnB,UAAU,aACb,yBAAKoE,IAAKC,IAAarE,UAAU,eAAesE,IAAI,aACpD,kBAAC,EAAD,CAAOzF,KAAMA,IACb,kBAAC,EAAD,CAAeyE,oBAAqBa,KAAKb,sBACzC,kBAAC,EAAD,CAAOzE,KAAMA,EAAMsC,QAASA,S,GAzBlBoD,IAAMC,WCFxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBCJjDC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.20095e4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport classNames from \"classnames\";\r\n\r\nimport \"./Cards.scss\";\r\n\r\nconst Cards = ({ data: { confirmed, deaths, recovered, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  const cardsInfo = [\r\n    {\r\n      name: \"Infected\",\r\n      style: \"infected\",\r\n      value: confirmed.value,\r\n      description: \"Number of actives cases of COVID-19\",\r\n    },\r\n    {\r\n      name: \"Recovered\",\r\n      style: \"recovered\",\r\n      value: recovered.value,\r\n      description: \"Number of recoveries from COVID-19\",\r\n    },\r\n    {\r\n      name: \"Deaths\",\r\n      style: \"deaths\",\r\n      value: deaths.value,\r\n      description: \"Number of deaths caused by COVID-19\",\r\n    },\r\n  ];\r\n\r\n  const renderCards = cardsInfo.map((card, index) => {\r\n    return (\r\n      <Grid\r\n        item\r\n        component={Card}\r\n        xs={12}\r\n        md={3}\r\n        className={classNames(\"card\", card.style)}\r\n        key={index}\r\n      >\r\n        <CardContent>\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            {card.name}\r\n          </Typography>\r\n          <Typography variant=\"h5\">\r\n            <CountUp start={0} end={card.value} duration={2.5} separator=\",\" />\r\n          </Typography>\r\n          <Typography color=\"textSecondary\">\r\n            {new Date(lastUpdate).toDateString()}\r\n          </Typography>\r\n          <Typography variant=\"body2\">{card.description}</Typography>\r\n        </CardContent>\r\n      </Grid>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"cards-container\">\r\n      <Grid container spacing={3} justify=\"center\">\r\n        {renderCards}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport \"./Chart.scss\";\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: {\r\n          display: false,\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className=\"chart-container\">{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nimport \"./CountryPicker.scss\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className=\"form-control\">\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => {\r\n          handleCountryChange(e.target.value);\r\n        }}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, index) => {\r\n          return (\r\n            <option value={country} key={index}>\r\n              {country}\r\n            </option>\r\n          );\r\n        })}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport { fetchData } from \"./api\";\r\nimport coronaImage from \"./assets/covid.png\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n\r\n  render() {\r\n    const { data, country } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <img src={coronaImage} className=\"corona-image\" alt=\"COVID-19\" />\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";"],"sourceRoot":""}